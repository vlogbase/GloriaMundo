Hello! We need to implement a credit system and PayPal integration for this application. Users should be charged credits based on their AI model usage, and they should be able to purchase credits via PayPal. Please use the current codebase in the Replit workspace.

**Phase 3 Goals:**
1. Calculate the cost of each OpenRouter API call based on token usage and model pricing, applying a 38% markup.
2. Deduct the calculated cost (in credits) from the user's balance before allowing requests and after successful completion.
3. Integrate PayPal (Sandbox mode) to allow users to purchase credits.

**Required Implementation Steps:**

**1. Backend - Cost Calculation & Credit Deduction (`server/routes.ts` and potentially `server/db.ts`/`storage.ts`):**
   a. **Fetch/Cache Model Pricing:** Modify the backend logic (perhaps add a startup routine or a cached function) to fetch model details, including pricing (`pricing.prompt`, `pricing.completion`), from the OpenRouter API endpoint (`GET /api/openrouter/models`) and store/cache this data efficiently.
   b. **Modify Chat Handler (`POST /api/conversations/:id/messages`):**
      * **Before OpenRouter Call:**
          * Get the requesting user's ID (from session/auth middleware).
          * Retrieve the user's current `creditBalance` from the `users` table in the database.
          * **Estimate Cost (Optional but Recommended):** You could estimate the cost based *only* on the *input* tokens + a buffer, or skip this pre-check for simplicity initially.
          * **Check Balance (Crucial Pre-check):** Implement a check to ensure the user has a positive credit balance (or > estimated cost if estimating). If the balance is zero or insufficient, return an appropriate error (e.g., 402 Payment Required) to the frontend immediately **without calling OpenRouter**.
      * **After Successful OpenRouter Call:**
          * Get `prompt_tokens` and `completion_tokens` from the `usage` object in the OpenRouter response.
          * Look up the input and output price for the specific `modelId` used (from the cached pricing data).
          * Calculate `base_cost = (prompt_tokens / 1_000_000 * input_price) + (completion_tokens / 1_000_000 * output_price)`.
          * Calculate `charge_amount_usd = base_cost * 1.38` (applying the 38% markup).
          * **Define Credit Value:** Establish a conversion rate (e.g., 10,000 credits = $1.00 USD, so $0.0001 per credit). Calculate `credits_to_deduct = Math.ceil(charge_amount_usd / 0.0001)`. Use `Math.ceil` to avoid fractional credits and ensure you cover costs.
          * **Deduct Credits:** Update the user's `creditBalance` in the `users` table by subtracting `credits_to_deduct`. Use a database transaction if possible for safety. Add logging for credit deductions.

**2. Backend - PayPal Integration (`server/routes.ts`, new PayPal service file?):**
   a. **Install SDK:** Install the official PayPal Checkout Server SDK: `npm install @paypal/checkout-server-sdk`.
   b. **Configure PayPal Client:** Create logic (e.g., in a new `server/paypal.ts` file) to initialize the PayPal client using environment variables: `PAYPAL_CLIENT_ID`, `PAYPAL_SECRET` (for Sandbox), and `PAYPAL_MODE` (set to `sandbox`). Advise me to add these to Replit Secrets.
   c. **Create Order Route (`POST /api/paypal/create-order`):**
      * Create this new authenticated route.
      * It should receive details about the credit package the user wants to buy (e.g., `{ packageId: 'small_pack' }` or `{ amount: 10.00, currency: 'USD' }` - decide on a simple structure). Define a few credit packages (e.g., $5 for 50k credits, $10 for 110k credits).
      * Use the PayPal SDK's `OrdersCreateRequest` to create an order with PayPal for the specified amount and currency (e.g., 'USD' or 'GBP' - be consistent).
      * Return the resulting `orderID` from PayPal to the frontend. Add logging and error handling.
   d. **Capture Order Route (`POST /api/paypal/capture-order`):**
      * Create this new authenticated route.
      * It should receive the `orderID` (captured by the frontend PayPal button) in the request body.
      * Use the PayPal SDK's `OrdersCaptureRequest` to capture the payment for the given `orderID`.
      * **Crucially:** Upon successful capture, determine the amount of credits purchased based on the captured amount or the package ID, and **update the user's `creditBalance` in the database**. Use a transaction. Add logging.
      * Return a success status to the frontend. Handle potential errors (e.g., order already captured).
   e. **Webhook Handler Route (`POST /api/paypal/webhook`):**
      * Create this *unauthenticated* route.
      * Implement logic to verify the incoming webhook signature using your `PAYPAL_WEBHOOK_ID` (advise me to add this Sandbox ID to Replit Secrets) and the PayPal SDK/request headers. Reject requests with invalid signatures.
      * Listen for the `CHECKOUT.ORDER.APPROVED` event (or `PAYMENT.CAPTURE.COMPLETED` depending on capture mode).
      * When a verified, relevant event is received, extract necessary details (like `orderID`, amount, user identifier if passed via custom fields during order creation - though relying on capture route is often simpler).
      * **Important:** To prevent double-crediting, this webhook handler often serves as a *backup* or *alternative* confirmation method. The primary credit update should ideally happen immediately after the successful capture in the `/api/paypal/capture-order` route. If using the webhook as primary, ensure idempotency (don't add credits twice for the same order). For now, focus on the capture route for crediting. Implement basic webhook verification and logging.

**3. Frontend - Basic UI (`client/src/...`):**
   a. **Display Balance:** Fetch the user's `creditBalance` (e.g., via the `/api/auth/me` endpoint - ensure the backend includes it) and display it somewhere visible (e.g., header, user menu).
   b. **Purchase UI:** Add a simple "Buy Credits" button or section. Define a few purchase options (e.g., buttons for "$5 pack", "$10 pack").
   c. **PayPal Button:** Install the React PayPal button component: `npm install @paypal/react-paypal-js`.
      * Wrap relevant parts of your app with the `PayPalScriptProvider`, passing your Sandbox `client-id`.
      * When a user clicks a purchase option:
          * Render the `PayPalButtons` component.
          * Implement its `createOrder` prop to call your backend `POST /api/paypal/create-order` endpoint and return the `orderID`.
          * Implement its `onApprove` prop to capture the `orderID` provided by PayPal, call your backend `POST /api/paypal/capture-order` endpoint with this `orderID`, show a success/error toast to the user, and refresh the displayed credit balance upon success.

Please implement these steps. Start with the backend cost calculation and deduction, then the PayPal backend routes, and finally the frontend UI integration. Use PayPal's Sandbox environment exclusively for now. Remember to advise me on all necessary Replit Secrets (`PAYPAL_CLIENT_ID`, `PAYPAL_SECRET`, `PAYPAL_WEBHOOK_ID`).