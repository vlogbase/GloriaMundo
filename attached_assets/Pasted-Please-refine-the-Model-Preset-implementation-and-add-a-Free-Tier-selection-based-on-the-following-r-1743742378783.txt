Please refine the Model Preset implementation and add a Free Tier selection based on the following requirements:

1.  **Update Default Preset Model IDs:**
    * Ensure the default presets assigned in the frontend state (`useModelPresets.tsx` or provider) use these exact model IDs:
        * Preset 1: `openai/o3-mini`
        * Preset 2: `anthropic/claude-3.7-sonnet`
        * Preset 3: `deepseek/deepseek-r1`
        * Preset 4: `google/gemini-2.0-flash`
        * Preset 5: `perplexity/sonar-pro`

2.  **Implement Model Name Display Logic:**
    * Modify the `ModelPresets.tsx` component to display shortened/cleaner names on the preset buttons.
    * When mapping the model ID to a display name (using the list from `/api/openrouter/models`), implement logic to extract the core name. Examples:
        * `openai/o3-mini` -> "o3 Mini"
        * `anthropic/claude-3.7-sonnet` -> "Claude 3.7 Sonnet"
        * `deepseek/deepseek-r1` -> "Deepseek R1"
        * `google/gemini-2.0-flash` -> "Gemini 2.0 Flash"
        * `perplexity/sonar-pro` -> "Sonar Pro"
    * Aim for a consistent rule (e.g., remove provider prefix if present, format version numbers cleanly).
    * **Crucially:** If a saved/default model ID cannot be mapped to a name from the fetched list, display the model ID itself cleanly on the button, NOT "Unknown Model". Ensure this mapping logic is robust.

3.  **Add "Free Tier" Selection:**
    * **Backend Check:** Ensure the `GET /api/openrouter/models` endpoint fetches and returns pricing information (e.g., `pricing: { prompt: "0.0", completion: "0.0" }`) for each model, if available from the OpenRouter `/models` API.
    * **UI Button:** Add a new button next to the 5 preset buttons, labeled initially as "Free Tier". Consider styling it slightly differently.
    * **Filtering:** In the frontend (`useModelPresets.tsx` or similar), filter the full list of models fetched from the backend to create a separate list of "free" models. Identify free models by checking if their pricing data indicates zero cost for both input and output (e.g., `prompt_cost == 0 && completion_cost == 0`). Handle potential variations in how pricing is represented in the API response.
    * **Selection Modal/Dropdown:** When the "Free Tier" button is clicked, open a modal or dropdown that displays *only* the filtered list of free models (use full names/IDs, perhaps grouped by provider like the preset modal).
    * **Activation:** Selecting a model from this free list should set it as the currently active model for the chat session.
    * **Button Label Update:** When a free model is active, update the "Free Tier" button's label to show its truncated name (e.g., "Free: Mistral 7B"). When no free model is active (e.g., a preset is active), the button should revert to "Free Tier".
    * **State Management:** Update the application state to track the active free model ID separately from the active preset slot. Ensure that activating a preset deselects any active free model (and vice versa), and update UI highlighting accordingly (only one button - either a preset or the free tier button - should be highlighted as active).

4.  **Enhance Preset Assignment Modal (For Edit Icons):**
    * **Implement Type-Ahead Search:** Add filtering/autocomplete to the search input field within the modal used for assigning models to presets.
    * **Display Full Info in List:** In the filtered results list within the modal, display the *full* model name and potentially the model ID.
    * **Group by Provider:** Organize the displayed model list within the modal by grouping models under their provider.
    * **(Optional Enhancement):** If context window size is available from `/api/openrouter/models`, display it in the modal list.

5.  **Implement "Edit Icon" UX for Presets:**
    * Ensure the preset assignment modal (from step 4) is triggered by clicking a small "edit" icon (e.g., ✏️) placed next to the model name on each of the 5 preset buttons, not by right-click or long-press.

6.  **Verify Preset Save Functionality:**
    * Re-confirm that the error previously observed ("Failed to update preset") when saving presets via the modal is resolved. Ensure the `PUT /api/users/me/presets` backend endpoint works correctly, handles errors gracefully, and logs issues if they occur.

Please implement all these updates for model defaults, display names, the new free tier selection, search modal usability, editing UX, and saving functionality.