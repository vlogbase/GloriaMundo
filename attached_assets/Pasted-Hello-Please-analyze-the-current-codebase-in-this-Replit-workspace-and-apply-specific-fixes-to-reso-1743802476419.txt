Hello! Please analyze the current codebase in this Replit workspace and apply specific fixes to resolve two critical issues related to AI model selection and user presets.

**Problem #1: Clicking Presets Doesn't Change the Chat Model**

* **Symptom:** When a user clicks a model preset button (e.g., "Claude 3.7 Sonnet"), the button highlights visually, but subsequent chat messages are still sent to the backend/OpenRouter using an incorrect default model ID (like `allenai/molmo-7b-d:free` or `openai/o3-mini`). The selected model is not actually activated for the chat session.
* **Root Cause:** The state update triggered by clicking the preset button isn't correctly read or used by the function that sends the chat message.
* **Required Fix:** Ensure the `handleClick` function in `ModelPresets.tsx` updates the correct global state for the active model ID, and that the `sendMessage` function in `useChat.ts` reads that same state variable.

    **Exact Code Changes for Fix #1:**

    1.  **File:** `client/src/hooks/useChat.ts`
        * **Verify/Add Import:** Make sure `useModelSelection` is imported:
            ```typescript
            import { useModelSelection } from '@/hooks/useModelSelection';
            ```
        * **Verify/Add State Usage:** Inside the `useChat` function definition, ensure `customOpenRouterModelId` is retrieved:
            ```typescript
            const { selectedModel, customOpenRouterModelId } = useModelSelection();
            ```
        * **Modify `sendMessage` Payload:** Inside the `sendMessage` function, find where the payload for the `apiRequest` to `POST /api/conversations/:id/messages` is created. Ensure the `modelId` field uses `customOpenRouterModelId`:
            ```typescript
            // Example: Inside the payload object for apiRequest
            {
              content: content,
              image,
              modelType: selectedModel, // Keep if used by backend
              modelId: customOpenRouterModelId // <-- CRITICAL: Ensure this uses the correct variable
            }
            ```
        * **Modify `sendMessage` Dependencies:** Ensure the `useCallback` dependency array for `sendMessage` includes `customOpenRouterModelId`.
            ```typescript
            }, [/*...,*/ selectedModel, customOpenRouterModelId, /*...*/]); // <-- CRITICAL: Ensure this is in the array
            ```

    2.  **File:** `client/src/components/ModelPresets.tsx`
        * **Verify/Add Import:** Make sure `useModelSelection` is imported:
            ```typescript
            import { useModelSelection } from '@/hooks/useModelSelection';
            ```
        * **Verify/Add Hook Usage:** Inside the `ModelPresets` component definition:
            ```typescript
            const { setCustomOpenRouterModelId } = useModelSelection(); // <-- Ensure setter is retrieved
            ```
        * **Modify `handleClick`:** Find the `handleClick` function. Ensure it calls `setCustomOpenRouterModelId` after getting the `modelId` from `activatePreset`:
            ```typescript
            const handleClick = (presetKey: 'preset1' | 'preset2' | 'preset3' | 'preset4' | 'preset5') => {
              const modelId = activatePreset(presetKey); // from useModelPresets
              if (modelId) {
                setCustomOpenRouterModelId(modelId); // <-- CRITICAL: Call the setter from useModelSelection
                // Remove any incorrect calls like setSelectedModel('openrouter') here
              } else {
                console.warn(`Preset ${presetKey} has no model assigned.`);
                // Optional: Add user feedback toast here
              }
            };
            ```

**Problem #2: Saving Preset Assignments Fails**

* **Symptom:** When a user right-clicks a preset, selects a model in the modal, and clicks "Save", a "Failed to update preset" error appears, corresponding to a backend 400 Bad Request error indicating invalid input data (expecting string for `preset1`, etc., received undefined).
* **Root Cause:** Mismatch between the data structure sent by the frontend `mutate` function and the data structure expected/validated by the backend `PUT /api/user/presets` handler.
* **Required Fix:** Align the frontend payload with the backend validation, and ensure the backend transforms the data before database update.

    **Exact Code Changes for Fix #2:**

    1.  **File:** `client/src/hooks/useModelPresets.tsx`
        * **Modify `mutate` Function:** Find the `useMutation` hook that calls `PUT /api/user/presets`. Inside its `mutationFn`, ensure the payload object sent via `apiRequest` has keys `preset1`, `preset2`, ..., `preset5`, with the corresponding model ID strings (or null) as values. **Do not** use `preset1ModelId` keys when calling `apiRequest`. Add logging here to confirm the payload being sent.
            ```typescript
            // Inside useMutation({... mutationFn: ... })
            mutationFn: async (newPresets: ModelPresets) => {
              // Ensure payload has keys preset1, preset2, etc.
              const payloadToSend = {
                preset1: newPresets.preset1,
                preset2: newPresets.preset2,
                preset3: newPresets.preset3,
                preset4: newPresets.preset4,
                preset5: newPresets.preset5,
              };
              console.log('Sending payload to PUT /api/user/presets:', payloadToSend); // Add log
              return await apiRequest('PUT', '/api/user/presets', payloadToSend); // Send this object
            },
            // ... onError handler exists ...
            ```

    2.  **File:** `server/routes.ts`
        * **Modify `PUT /api/user/presets` Handler:**
            * Find the handler function for this route.
            * Ensure any input validation schema (e.g., Zod) expects an object with optional, nullable string fields: `preset1: z.string().nullable().optional()`, `preset2: ...` etc.
            * **After** validating `req.body` (which should now contain `preset1`, `preset2`, etc.), **add code to transform** this object into one with keys matching the database columns before calling the storage function.
                ```typescript
                // Inside PUT /api/user/presets handler, AFTER validation of req.body
                const validatedData = req.body; // Assuming validation passed

                // Transform keys for database update
                const dbUpdateData = {
                  preset1_model_id: validatedData.preset1,
                  preset2_model_id: validatedData.preset2,
                  preset3_model_id: validatedData.preset3,
                  preset4_model_id: validatedData.preset4,
                  preset5_model_id: validatedData.preset5,
                };
                console.log('Transformed data for DB update:', dbUpdateData); // Add log

                try {
                  // Pass the transformed data to the database function
                  await storage.updateUserPresets(userId, dbUpdateData);
                  res.json({ success: true });
                } catch (error) {
                   console.error('Error updating presets in storage:', error);
                   res.status(500).json({ message: 'Failed to update presets in database.' });
                }
                ```

**Final Instruction:**

Please apply *these specific code changes* to the relevant files in the workspace. After applying the changes, restart the application.