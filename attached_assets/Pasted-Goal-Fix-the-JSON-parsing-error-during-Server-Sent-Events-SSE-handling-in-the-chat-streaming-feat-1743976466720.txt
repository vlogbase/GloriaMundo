Goal:
Fix the JSON parsing error during Server-Sent Events (SSE) handling in the chat streaming feature and ensure that responses are being sent incrementally from the backend.

Frontend Changes (File: client/src/hooks/useStreamingChat.ts):

Problem:
Currently, the SSE event handler in the sendMessage function directly calls JSON.parse(event.data). However, the raw SSE data includes a "data: " prefix and sometimes a [DONE] marker, causing a SyntaxError.

Task:
Update the eventSource.onmessage handler to:

a. Retrieve the raw data from event.data and log it for debugging.

b. Create a variable (e.g., jsonString) that initially holds the raw data.

c. Check if the raw data starts with "data: ". If so, strip this prefix (using something like rawData.substring(6).trim()).

d. Check if the resulting string is exactly equal to [DONE]. If it is, log the receipt of the marker, optionally close the EventSource, and return early from the handler.

e. Otherwise, call JSON.parse() on the cleaned string.

f. In the catch block, log both the error and the original raw data for easier debugging, and consider closing the EventSource on error.

Example Implementation:

javascript
Copy
eventSource.onmessage = (event) => {
  try {
    const rawData = event.data;
    console.log("[useStreamingChat] Raw event data received:", rawData);

    let jsonString = rawData; // Start with the raw data

    // Check for and remove the "data: " prefix if present
    if (rawData.startsWith("data: ")) {
      console.warn("[useStreamingChat] Stripping 'data: ' prefix from event data.");
      jsonString = rawData.substring(6).trim();
    }

    // Handle the [DONE] marker explicitly
    if (jsonString === "[DONE]") {
      console.log("[useStreamingChat] Received [DONE] marker, closing stream if necessary.");
      // Optionally: eventSource.close();
      return;
    }

    // Now safely parse the cleaned string
    const parsedData = JSON.parse(jsonString);
    console.log("[useStreamingChat] Parsed event data:", parsedData);

    // Process parsedData based on its type (e.g., "initial", "chunk", etc.)
    // ... your existing handling logic here ...

  } catch (e) {
    console.error("[useStreamingChat] Error parsing JSON from SSE event:", e);
    console.error("[useStreamingChat] Failed on raw data:", event.data);
    // Optionally close the event source if parsing fails repeatedly
    eventSource.close();
  }
};
Backend Verification (Likely in server/routes.ts or similar):

Problem:
Even with the frontend fixed, the streaming might still appear to send responses all at once if the backend buffers the response from OpenRouter instead of sending each chunk immediately.

Task:

a. Locate the SSE streaming endpoint (e.g., /api/conversations/:id/messages/stream).

b. Verify that the code processes the OpenRouter response in a loop and calls res.write() for each data chunk as soon as it becomes available.

c. Add logging (if not already present) immediately before each res.write() call to confirm that chunks are being sent incrementally.

d. Ensure that after all chunks are sent, the connection is properly ended with res.end().

e. Use the browser’s Developer Tools (Network tab) to inspect the SSE connection and verify that the chunks arrive one-by-one, not as a single block.

Final Steps:

Testing:
After applying these changes, run the application.

Open your browser’s Network tab and find the SSE connection. Verify that chunks are delivered incrementally.

Check the console logs for both the frontend and backend to ensure that:

The "data: " prefix is successfully removed and JSON parsing proceeds without errors.

The [DONE] marker is detected and handled appropriately.

Each backend chunk is logged before being sent out via res.write().

Error Handling:
Ensure that if any JSON parsing error occurs, the error logs include the original raw data so you can diagnose further if needed.

Implement these changes, test the entire streaming workflow, and confirm that the chat responses now stream incrementally and without JSON parsing errors.

