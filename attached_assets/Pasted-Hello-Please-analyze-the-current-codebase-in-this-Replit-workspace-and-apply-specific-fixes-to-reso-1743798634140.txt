Hello! Please analyze the current codebase in this Replit workspace and apply specific fixes to resolve issues with AI model selection and preset saving.

**Current Problems:**

1.  **Stuck Model:** When a user clicks a preset button (e.g., "Claude 3.7 Sonnet") in the UI, the button highlights, but subsequent chat messages sent to the backend API still use an incorrect, default model ID (like `allenai/molmo-7b-d:free` or `openai/o3-mini`). The AI's response sometimes confirms it received input related to this wrong model, or mentions duplicated/malformed input. The selected preset model is not actually being used for the chat.
2.  **Preset Saving Error:** When a user right-clicks a preset, selects a model in the modal dialog's dropdown, and clicks "Save", a "Failed to update preset. Please try again." error appears (this corresponds to a 400 Bad Request error from the `PUT /api/user/presets` endpoint, indicating invalid data was received, specifically expecting strings for `preset1`, `preset2`, etc. but getting undefined).

**Required Fixes:**

**Fix #1: Correct Preset Activation State Flow (Frontend)**

* **Problem:** The `useChat.ts` hook reads the wrong state variable to determine the model ID for API calls. It needs to read the state updated by the preset buttons.
* **File to Edit:** `client/src/hooks/useChat.ts`
* **Changes:**
    * Ensure `useModelSelection` is imported.
    * Ensure `customOpenRouterModelId` is retrieved from `useModelSelection()`.
    * Use `customOpenRouterModelId` when determining the `modelId` in the `sendMessage` function's API payload.
    * Update the `useCallback` dependency array for `sendMessage`.

    ```typescript
    // --- Start of Changes for client/src/hooks/useChat.ts ---

    // Ensure near top imports:
    import { useModelSelection } from '@/hooks/useModelSelection';
    // Remove or comment out import if selectedModelId is not the correct source for active ID:
    // import { useOpenRouterModels } from '@/hooks/useOpenRouterModels';

    // Inside the useChat hook component:
    export const useChat = () => {
      // ... other state
      const { toast } = useToast();
      // Make sure you get customOpenRouterModelId from useModelSelection:
      const { selectedModel, customOpenRouterModelId } = useModelSelection(); // <-- Ensure this line exists and is correct
      // Remove or comment out if selectedModelId is not the correct source:
      // const { selectedModelId } = useOpenRouterModels();
      // ... rest of hook

      // Inside the sendMessage useCallback:
      const sendMessage = useCallback(async (conversationId: number, content: string, image?: string) => {
        // ... other logic ...

        try {
          // ... logging ...

          // Prepare model metadata using the CORRECT state variable
          let modelMetadata = {};
          if (selectedModel === 'openrouter' && customOpenRouterModelId) { // <-- Use customOpenRouterModelId
            console.log(`Using OpenRouter model: ${customOpenRouterModelId}`); // <-- Use customOpenRouterModelId (logging)
            modelMetadata = { modelId: customOpenRouterModelId }; // <-- Use customOpenRouterModelId
          }

          // Ensure payload passed to apiRequest uses the correct ID
          const response = await apiRequest(
            "POST",
            `/api/conversations/${conversationId}/messages`,
            {
              content: content,
              image,
              modelType: selectedModel,
              // Make sure modelId comes from the correct variable, either via spread or explicitly:
              ...modelMetadata
              // OR explicitly ensure: modelId: customOpenRouterModelId
            }
          );

          // ... rest of try block ...
        } catch (error) {
          // ... catch block ...
        } finally {
          setIsLoadingResponse(false);
        }
      // Update dependency array for useCallback:
      }, [activeConversationId, selectedModel, customOpenRouterModelId, setLocation, toast]); // <-- Use customOpenRouterModelId

      // ... rest of hook ...
    };

    // --- End of Changes for client/src/hooks/useChat.ts ---
    ```

**Fix #2: Correct Backend Payload Sent *to* OpenRouter**

* **Problem:** The backend `POST .../messages` handler sends metadata embedded within the `content` field to OpenRouter, confusing the AI.
* **File to Edit:** `server/routes.ts`
* **Changes:** Locate the `POST /api/conversations/:conversationId/messages` handler. Find where the `messages` array payload is constructed for the call to `https://openrouter.ai/api/v1/chat/completions`. Ensure each message object in that array has a `content` field containing **only the plain text string**. Add logging before the `Workspace` call to show the `model` parameter being used (`req.body.modelId`).

    ```typescript
    // --- Conceptual Changes for POST /api/conversations/:id/messages in server/routes.ts ---

    // Inside the handler function:
    // ... Get previous messages, system prompt etc. ...
    const { content: userMessageContent, modelId: requestedModelId, modelType } = req.body; // Get data from frontend

    // Construct the messages array for OpenRouter API
    const openRouterMessages = [
      { role: "system", content: systemPromptString }, // Ensure content is string
      ...previousMessages.map(msg => ({
          role: msg.role,
          content: msg.content // Ensure msg.content is JUST the string text
      })),
      { role: "user", content: userMessageContent } // Ensure content is JUST the string text
    ];

    // Construct the payload for OpenRouter
    const openRouterPayload = {
        model: requestedModelId, // <-- Use the ID from the request!
        messages: openRouterMessages, // <-- Use the cleaned messages array
        // ... other parameters like temperature, stream etc.
    };

    // Add logging BEFORE the fetch call
    console.log(`Calling OpenRouter. Model: ${openRouterPayload.model}, Messages Count: ${openRouterPayload.messages.length}`);
    console.log('Messages Payload sample:', JSON.stringify(openRouterPayload.messages.slice(-2), null, 2)); // Log last 2 messages

    try {
        // const response = await fetch('[https://openrouter.ai/api/v1/chat/completions](https://openrouter.ai/api/v1/chat/completions)', {
        //    method: 'POST',
        //    headers: { ... },
        //    body: JSON.stringify(openRouterPayload) // Send the corrected payload
        // });
        // ... Handle response ...

        // Ensure response sent BACK to frontend contains ONLY the assistant message object
        // console.log('Sending response to frontend:', assistantMessageObject);
        // return res.json(assistantMessageObject); // Or { assistantMessage: assistantMessageObject } depending on frontend expectation

    } catch (error) {
        console.error('Error in OpenRouter call or processing:', error);
        // ... handle error ...
    }

    // --- End of Conceptual Changes for POST /api/conversations/:id/messages ---
    ```
    *(Note: Provide this conceptual structure; the agent needs to adapt it precisely to the existing code flow)*.

**Fix #3: Correct Preset Saving API Payload/Validation**

* **Problem:** Saving presets fails with a 400 error because the backend validation expects string fields `preset1`, `preset2` etc. but might be receiving undefined, or the keys sent by the frontend don't match the DB keys expected later.
* **Files to Edit:** `client/src/hooks/useModelPresets.tsx` AND `server/routes.ts`
* **Changes:**
    * **Frontend (`useModelPresets.tsx`):** Inside the `mutate` function's `mutationFn`, ensure the payload object sent via `apiRequest('PUT', '/api/user/presets', payload)` has the keys `preset1`, `preset2`, `preset3`, `preset4`, `preset5` with string values (or null). **Remove** the transformation to `preset1ModelId` keys *before* the `apiRequest` call if it exists from previous attempts. Log the exact payload being sent.
    * **Backend (`server/routes.ts`):** Inside the `PUT /api/user/presets` handler:
        * Ensure any input validation (e.g., Zod schema) correctly expects keys `preset1`, `preset2`, ..., `preset5`, allowing string or null values.
        * **After** successful validation, **transform** the received object (with keys `preset1`, etc.) into an object with keys matching the database columns (`preset1_model_id`, etc.) before passing it to the database update function (`storage.updateUserPresets`). Add logging here too.

Please apply these exact fixes. Focus on ensuring the state variable connection in Fix #1 is correct, the backend payload construction in Fix #2 is clean, and the frontend payload / backend validation & transformation in Fix #3 are aligned. Restart the application after applying the changes.