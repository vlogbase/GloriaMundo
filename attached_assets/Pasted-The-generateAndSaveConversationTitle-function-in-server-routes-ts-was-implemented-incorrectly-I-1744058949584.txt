The `generateAndSaveConversationTitle` function in `server/routes.ts` was implemented incorrectly. It currently contains the old manual title generation logic.

Please **replace the entire body** of the `async function generateAndSaveConversationTitle(conversationId: number): Promise<void>` (from the first line inside the `try` block up to the `catch` block) with the following correct logic:

1.  **Get Conversation & First Message:** Keep the initial checks to get the `conversation` and `firstUserMessage`. If `conversation.title !== "New Conversation"` or `firstUserMessage` is null, return early. Store `firstUserMessage.content` in a variable.
2.  **Fetch OpenRouter Models:**
    * Make a `Workspace` call to the `/api/openrouter/models` endpoint *internally* within the server (or reuse the function/logic that endpoint uses) to get the list of available models. Handle potential errors during fetching.
    * Parse the response. Assume each model object in the response has `id` (string) and `isFree` (boolean) fields based on the logic in the `/api/openrouter/models` endpoint handler.
3.  **Filter & Select Free Model:**
    * Filter the list to get only models where `isFree === true`.
    * If the free model list is empty, log a warning "No free models available for title generation." and return.
    * Define the preferred model list:
      ```typescript
      const preferredTitleModels = [
        'qwen/qwen-2.5-vl-3b-instruct',
        'allenai/molmo-7b-d',
        'meta-llama/llama-4-maverick-17b-instruct-128e',
        'meta-llama/llama-4-scout-17b-instruct-16e',
        'google/gemini-2.5-pro-experimental',
      ];
      ```
    * Find the first `modelId` in `preferredTitleModels` that is also present in the filtered free model list.
    * If no preferred model is found, select the `modelId` of the *first* model in the free model list as a fallback.
4.  **Call OpenRouter for Title:**
    * Construct the prompt messages array: `const titlePromptMessages = [{"role": "user", "content": `Based on the following user message, suggest a concise and relevant conversation title (max 7 words):\n\nUser Message: '''${firstUserMessageContent}'''\n\nTitle:`}]`
    * Construct the payload for the OpenRouter API call, including the selected `model` (the `modelId` from the previous step), the `messages` array (`titlePromptMessages`), and parameters like `temperature: 0.5`, `max_tokens: 20`.
    * Make a `Workspace` call to `https://openrouter.ai/api/v1/chat/completions` with the `POST` method, correct headers (`Authorization: Bearer ${process.env.OPENROUTER_API_KEY}`, `Content-Type: application/json`), and the payload body.
    * Add comprehensive `try...catch` around this `Workspace` call. Log errors if the API call fails and return.
5.  **Process Response & Update Storage:**
    * If the fetch is successful (`response.ok`), parse the JSON response.
    * Extract the generated title text from the response (e.g., `data.choices[0].message.content`).
    * Perform basic cleanup on the extracted title (trim whitespace, remove surrounding quotes if any).
    * If a valid, non-empty title string is obtained:
        * Call `await storage.updateConversationTitle(conversationId, generatedTitle);`
        * Log the success: `console.log(`AI generated and saved title for conversation ${conversationId}: "${generatedTitle}"`);`
    * Add `try...catch` around parsing the response and updating storage. Log errors if they occur.

Ensure the entire original body of the `generateAndSaveConversationTitle` function (inside the main try block) is replaced by this new logic. Keep the outer `try...catch` block that already exists around the function body for overall error handling.