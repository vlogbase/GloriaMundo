Okay, previous attempts to fix the model selection and preset issues haven't fully resolved the problems. Please analyze the **current codebase directly in the Replit workspace** to diagnose and fix the following observed behaviors:

**Problem 1: Chat Model Does Not Change (Stuck)**
* **Symptom:** When I click a preset button (e.g., the one for 'Claude 3.7 Sonnet' or 'Dolphin'), the UI button visually highlights correctly, but subsequent chat messages sent to the backend still seem to use an incorrect/old model ID (like `allenai/molmo-7b-d:free`) when calling the OpenRouter API.
* **Evidence:** The AI's own responses sometimes indicate it received malformed input mentioning the wrong model ID or duplicated messages (as seen previously, e.g., in `image_9894bb.png`). As a result, I don't get useful AI responses.
* **Goal:** Clicking a preset button should correctly update the active model ID used for subsequent chat API calls, so the selected model is actually used.

**Problem 2: Preset Saving Fails**
* **Symptom:** When I right-click a preset button, open the modal, select a model from the dropdown list, and click 'Save', a toast notification consistently appears with the error "Failed to update preset. Please try again."
* **Goal:** Saving a model assignment to a preset slot via the modal should work correctly and update the user's saved presets without error.

**Instructions for Agent:**

1.  **Analyze Current Code:** Examine the relevant files currently in your workspace.
2.  **Diagnose Root Causes:** Find the reasons for both Problem 1 (incorrect model usage despite preset clicks) and Problem 2 (preset saving API failure).
    * For Problem 1, focus on the **state management flow**: how is the active model ID set when a preset button is clicked (in `ModelPresets.tsx`, `useModelPresets.tsx`, `useModelSelection.tsx`) and how is it read/used by the chat function (`useChat.ts`) when calling the backend (`server/routes.ts`)? Pinpoint the disconnect or bug preventing the correct model ID from being used. Also verify the payload structure sent *to* OpenRouter in the backend handler.
    * For Problem 2, investigate the `PUT /api/user/presets` endpoint in `server/routes.ts`, the `mutate` function in `useModelPresets.tsx`, and the associated database update logic (`storage.updateUserPresets` or similar). Why is the API call failing?
3.  **Implement Fixes:** Apply the necessary code changes across all relevant files (frontend hooks, components, backend routes, storage logic) to resolve both problems comprehensively.
4.  **Confirm:** After applying the fixes, please confirm what changes were made and restart the application.

Please use your access to the current codebase to trace these issues and implement robust fixes.