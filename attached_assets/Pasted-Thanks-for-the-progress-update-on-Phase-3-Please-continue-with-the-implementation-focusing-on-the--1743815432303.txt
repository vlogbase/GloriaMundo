Thanks for the progress update on Phase 3. Please continue with the implementation, focusing on the **backend logic** first:

**1. Implement Credit Calculation & Deduction:**
   a. **Modify `POST /api/conversations/:id/messages` handler in `server/routes.ts`:**
      * **Fetch/Cache Pricing:** Implement logic to access OpenRouter model pricing (input/output costs per token). You can fetch this from `/api/openrouter/models` and cache it, or use the `models.json` file if available and up-to-date.
      * **Credit Check (Before OR Call):** Get the user's `creditBalance`. Implement a check to ensure the balance is greater than zero. Return a 402 Payment Required error if insufficient, preventing the OpenRouter call.
      * **Cost Calculation (After OR Call):** Get `prompt_tokens` and `completion_tokens` from the OpenRouter response `usage` object. Calculate `base_cost` using the model's specific pricing. Calculate `charge_amount_usd = base_cost * 1.38` (38% markup). Convert `charge_amount_usd` to integer `credits_to_deduct` (define a rate, e.g., 10000 credits per $1, use `Math.ceil`).
      * **Deduct Credits:** Call the appropriate storage function (e.g., `storage.updateUserCreditBalance`) to subtract `credits_to_deduct` from the user's balance. Ensure this happens *after* confirming a successful OpenRouter response. Add logging for this deduction.

**2. Complete PayPal Backend Routes (`server/routes.ts` and `server/paypal.ts`):**
   a. **Initialize Client:** Ensure `server/paypal.ts` correctly initializes the PayPal SDK client using Sandbox credentials from Replit Secrets (`PAYPAL_CLIENT_ID`, `PAYPAL_SECRET`, `PAYPAL_MODE`).
   b. **Implement `POST /api/paypal/create-order`:** Define credit packages (e.g., $5 for 50k credits, $10 for 110k credits). Use the PayPal SDK (`OrdersCreateRequest`) to create an order with the correct amount/currency based on the requested package. Return the `orderID`. Add error handling.
   c. **Implement `POST /api/paypal/capture-order`:** Use the PayPal SDK (`OrdersCaptureRequest`) to capture the payment for the `orderID` received from the frontend. On successful capture, determine the credits purchased and call the storage function (e.g., `storage.updateUserCreditBalance`) to add the credits to the user's balance. Return success status. Add error handling.
   d. **Implement `POST /api/paypal/webhook`:** Implement basic webhook signature verification using `PAYPAL_WEBHOOK_ID` (from Replit Secrets) and the PayPal SDK/headers. Log verified events (like `CHECKOUT.ORDER.APPROVED`). For now, don't add credits here; rely on the capture route.

Please complete these backend implementation steps. We will finish the frontend (`CreditsPage.tsx` integration) after this backend logic is functional.