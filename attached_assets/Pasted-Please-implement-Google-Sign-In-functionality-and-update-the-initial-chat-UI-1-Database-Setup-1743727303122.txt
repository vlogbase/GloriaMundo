Please implement Google Sign-In functionality and update the initial chat UI.

**1. Database Setup (using Drizzle ORM for PostgreSQL):**
   - In `shared/schema.ts`, define or update a `users` table with columns: `id` (PK, UUID or serial), `googleId` (text, unique, indexed), `email` (text, unique), `name` (text), `avatarUrl` (text, nullable), `creditBalance` (integer, non-nullable, default 0), `createdAt` (timestamp with TZ, default now()), `updatedAt` (timestamp with TZ, default now(), auto-updating if possible).
   - Generate the corresponding SQL migration file using `npx drizzle-kit generate:pg`.

**2. Backend Authentication (Node.js/Express):**
   - Install necessary packages: `passport`, `passport-google-oauth20`, `express-session`, `connect-pg-simple`.
   - Configure `express-session` middleware. Use `connect-pg-simple` to store sessions in the PostgreSQL database (use database connection details, potentially from environment variables). Set appropriate session secret (advise me to add it to Replit Secrets).
   - Configure `passport` with the `GoogleStrategy`. Use `GOOGLE_CLIENT_ID` and `GOOGLE_CLIENT_SECRET` environment variables for credentials (advise me to add these to Replit Secrets). Set the callback URL to `/auth/google/callback`.
   - Implement Passport user serialization and deserialization.
   - In the Google strategy callback: Find a user by `googleId`. If found, log them in. If not found, create a new user record in the database using the profile information and then log them in.
   - Create the following backend routes:
     - `GET /auth/google`: Initiates the Google OAuth flow using Passport.
     - `GET /auth/google/callback`: Handles the callback from Google, authenticates the user using Passport, and redirects to the frontend's main page upon success, or an error page on failure.
     - `GET /api/auth/me`: Returns the currently logged-in user's data (e.g., id, name, email, avatarUrl, creditBalance) if authenticated, otherwise returns a 401 Unauthorized status or null/empty object. Ensure this route uses the session to identify the user.

**3. Frontend Integration (React/TypeScript):**
   - Create a mechanism (e.g., using React Context or a state management library like Zustand/Jotai) to manage the application's authentication state (loading state, authenticated user data, or null).
   - On application load, call the backend `GET /api/auth/me` endpoint to check the user's login status and populate the auth state.
   - Add a "Sign in with Google" button (place it visibly, perhaps in the header or user menu area). Clicking this button should navigate the browser to the backend `/auth/google` route.
   - Conditionally render UI elements based on auth state: show the "Sign in" button if logged out, and show user information (like name/avatar) and potentially a "Sign out" button if logged in. (Implement sign-out later, just focus on sign-in display for now).

**4. Chat UI Cleanup (React/TypeScript):**
   - Locate the component responsible for rendering the main chat interface (likely `client/src/pages/Chat.tsx` or similar).
   - Modify it so that when there are no messages in the current conversation, it displays a simple greeting message (e.g., "Hello! How can GloriaMundo help you today?") instead of the four suggested query buttons currently shown.

Please proceed with implementing these changes across the relevant files (`shared/schema.ts`, server routes/index file, relevant frontend components). Make sure to handle potential errors gracefully. Show me the key code changes, especially in the schema, backend routes, and the main frontend component handling auth state and UI updates. Also, list any new environment variables I need to add to Replit Secrets (like `SESSION_SECRET`, `GOOGLE_CLIENT_ID`, `GOOGLE_CLIENT_SECRET`, database connection details if not already there).