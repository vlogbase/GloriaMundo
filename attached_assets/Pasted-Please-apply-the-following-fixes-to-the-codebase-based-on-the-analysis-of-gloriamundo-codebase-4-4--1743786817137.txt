Please apply the following fixes to the codebase based on the analysis of `gloriamundo codebase 4 4 evening.txt`:

**1. Fix Preset Activation (Frontend):**
   a. Modify the `handleClick` function in `client/src/components/ModelPresets.tsx`.
   b. After calling `activatePreset(presetKey)` and getting the `modelId`, check if `modelId` is valid.
   c. If valid, call the `setCustomOpenRouterModelId` function (imported from `useModelSelection`) and pass the `modelId` to it.
   d. Remove the incorrect `setSelectedModel('openrouter');` line.

**2. Fix Backend Chat Payload & Response (`server/routes.ts`):**
   a. Locate the handler for `POST /api/conversations/:conversationId/messages`.
   b. **Fix Payload to OpenRouter:** Find where the `messages` array is constructed for the OpenRouter API request body. Ensure that the `content` field for each message object in this array contains ONLY the plain string content. Do NOT embed metadata like `modelId` or `modelType` within the message content.
   c. **Fix `model` Parameter:** Ensure the correct, currently selected `modelId` (received from the frontend request body, e.g., `req.body.modelId`) is passed as the top-level `model` parameter in the JSON body sent to OpenRouter.
   d. **Fix Response Handling:** Ensure the `Workspace` call to OpenRouter is correctly `await`ed. Add logging before the fetch, after getting the response status, and in any `catch` block.
   e. **Fix Response to Frontend:** Ensure this handler sends *only* the assistant message object back to the frontend upon success. Add logging just before sending the response to show the object being sent.

**3. Verify & Fix Default Preset IDs (Frontend):**
   a. In `client/src/hooks/useModelPresets.tsx`, check the model IDs used in the `defaultPresets` object.
   b. Verify these IDs against the actual list of models available from OpenRouter (you might need to fetch the list or check OpenRouter documentation). Correct any invalid IDs to use valid ones like `openai/gpt-3.5-turbo`, `anthropic/claude-3.5-sonnet`, `deepseek/deepseek-chat`, `google/gemini-1.5-pro-latest`, `perplexity/sonar-medium-online`, etc.

**4. Debug Preset Saving (Backend - Lower Priority for this prompt, but check):**
   a. Briefly examine the handler for `PUT /api/users/me/presets` in `server/routes.ts` and the `storage.updateUserPresets` function it calls. Add error logging within this handler, especially around the database update call. (A full fix might require checking the DB schema again later if this fails).

Apply these fixes. Prioritize making preset activation (1) and the backend chat handler (2) correct, as these are blocking core functionality. Also correct the default IDs (3).