Please modify the `server/routes.ts` file to implement automatic conversation title generation using a free OpenRouter model after the first message exchange.

1.  **Define Helper Function:** Create a new asynchronous helper function, perhaps named `generateAndSaveConversationTitle`, within `server/routes.ts`. This function should accept `conversationId` and `firstUserMessageContent` as arguments.
2.  **Inside `generateAndSaveConversationTitle`:**
    * **Fetch Models:** Call the existing logic/function that fetches the list of models from OpenRouter (likely related to the `/api/openrouter/models` endpoint handler).
    * **Filter Free Models:** Filter the fetched list to get only models marked as `isFree` (based on their pricing data being zero/null). If no free models are available, log a warning and exit the function.
    * **Select Model:**
        * Define the ordered preference list:
          ```typescript
          const preferredTitleModels = [
            'qwen/qwen-2.5-vl-3b-instruct', // Qwen 3B
            'allenai/molmo-7b-d',         // Molmo 7B
            'meta-llama/llama-4-maverick-17b-instruct-128e', // Llama 4 Maverick
            'meta-llama/llama-4-scout-17b-instruct-16e',    // Llama 4 Scout
            'google/gemini-2.5-pro-experimental', // Gemini 2.5 Pro
            // Add more preferred models here if desired
          ];
          ```
        * Find the first `modelId` from `preferredTitleModels` that exists in the filtered list of *currently* free models.
        * If no preferred model is found among the free ones, select the `modelId` of the *first* available model from the free list as a fallback.
    * **Call OpenRouter:**
        * Construct a simple prompt for the selected model asking it to generate a concise title (max 7 words) based on `firstUserMessageContent`. Example: `[{"role": "user", "content": "Based on the following user message, suggest a concise and relevant conversation title (max 7 words):\n\nUser Message: '''${firstUserMessageContent}'''\n\nTitle:"}]`
        * Make an API call using `Workspace` to the OpenRouter completions endpoint (`https://openrouter.ai/api/v1/chat/completions`) with the selected `modelId`, the title prompt, and appropriate parameters (e.g., `temperature: 0.5`, `max_tokens: 20`). Include the `Authorization` header with the OpenRouter API key (`process.env.OPENROUTER_API_KEY`).
        * *Important:* Add error handling for this `Workspace` call.
    * **Process Response & Update:**
        * If the API call is successful, parse the response to extract the generated title from the assistant's message content.
        * Perform basic cleanup on the title (trim whitespace, remove quotes).
        * If a valid title string is obtained, call `await storage.updateConversationTitle(conversationId, generatedTitle);`. Log success.
        * Add `try...catch` blocks around the API call and storage update to handle potential errors gracefully (log errors but don't crash the main request flow).
3.  **Integrate into Routes:**
    * **POST `/api/conversations/:id/messages`:** Locate the section *after* the assistant message has been successfully created/updated (e.g., after `await storage.updateMessage(...)` or successful handling of non-streaming `data`) but *before* the final `res.json({...})` call. Add a check: `if (conversation && conversation.title === "New Conversation") { ... }`. Inside this `if` block, retrieve the first user message content for the conversation (you might need a new storage method `getFirstUserMessage(conversationId)` or fetch all messages and find the first user one) and then call `await generateAndSaveConversationTitle(conversationId, firstUserMessageContent);`. Wrap this call in its own `try...catch` to prevent title generation failures from breaking the main response.
    * **GET `/api/conversations/:id/messages/stream`:** Locate the section *after* the stream has successfully completed and the final `"done"` event has been sent (i.e., just before `res.end()`). Add a similar check: `if (conversation && conversation.title === "New Conversation") { ... }`. Inside, retrieve the first user message content and call `await generateAndSaveConversationTitle(conversationId, firstUserMessageContent);`. Wrap this in a `try...catch`.

(Note: Implementing `getFirstUserMessage` in `storage.ts` might be needed as a prerequisite if it doesn't exist).