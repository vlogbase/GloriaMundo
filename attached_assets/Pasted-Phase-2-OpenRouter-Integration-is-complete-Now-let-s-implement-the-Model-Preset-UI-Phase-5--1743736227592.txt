Phase 2 (OpenRouter Integration) is complete. Now, let's implement the Model Preset UI (Phase 5).

**Goal:** Replace the old model buttons and the simple OpenRouter dropdown with 3-4 configurable preset buttons. Clicking a preset activates its assigned model. Right-clicking (or long-pressing) allows assigning a model to that preset.

**1. Backend Changes:**

   a.  **Database Schema:** Modify the database schema (`shared/schema.ts`) to store user-specific preset configurations. Either add columns to the `users` table (e.g., `preset1_model_id TEXT`, `preset2_model_id TEXT`, etc.) or create a new related table `user_presets`. Choose a method suitable for storing 3-4 model IDs per user. Remember to handle potentially null/unset presets.
   b.  **Apply Migration:** Run `npx drizzle-kit push:pg` to apply these schema changes to the database.
   c.  **API Endpoints:** Create two new authenticated backend API routes:
      * `GET /api/users/me/presets`: Fetches the current logged-in user's saved preset configuration (the model IDs assigned to each preset slot) from the database. Returns default/null values if none are set.
      * `PUT /api/users/me/presets`: Accepts a payload (e.g., `{ "preset1": "model_id_a", "preset2": "model_id_b", ... }`) and updates the current user's preset configuration in the database. Validate the input.

**2. Frontend Changes (React/TypeScript):**

   a.  **UI Replacement:** In the chat interface (`client/src/pages/Chat.tsx` or related components):
      * Remove the old "Reasoning", "Search", "Multimodal" buttons.
      * Remove the basic "OpenRouter" label and `<select>` dropdown added in the previous step.
      * Add a row of 3 or 4 new preset buttons (e.g., using Shadcn UI Button components).
   b.  **Preset State:** Manage frontend state for:
      * The model ID assigned to each preset slot (fetched from `GET /api/users/me/presets`).
      * The currently active/selected model ID for the chat session.
      * Which preset slot (if any) corresponds to the currently active model.
   c.  **Button Display:**
      * Each preset button should display a default label (e.g., "Preset 1", "Preset 2") or, preferably, the name of the OpenRouter model currently assigned to it (this requires mapping the saved model ID to a name, perhaps using the model list fetched previously or fetching model details as needed).
      * The preset button corresponding to the *currently active* model should be visually highlighted (e.g., using a different variant or style).
   d.  **Fetch Presets:** When the component loads for a logged-in user, fetch their saved preset configuration from `GET /api/users/me/presets` and update the state. Also ensure the list of all available OpenRouter models (from `GET /api/openrouter/models`) is available for the selection modal later.
   e.  **Left-Click Action:** When a user clicks (left-click or tap) a preset button:
      * Update the application state to set the currently active model ID to the one associated with that preset slot.
      * Visually highlight the clicked button as active.
      * Ensure this selected model ID is used when sending subsequent chat messages to the backend.
   f.  **Right-Click/Long-Press Action (Modal Setup):**
      * Implement logic to detect a right-click (desktop) or long-press (mobile) on a preset button.
      * On detection, open a Modal dialog (e.g., using Shadcn UI Dialog).
      * **Inside the Modal:** Display the list of all available OpenRouter models (fetched earlier). Allow the user to search/select a model from this list. Add a "Save" or "Assign" button.
      * **Saving:** When the user selects a model and clicks "Save" in the modal, update the frontend state for the corresponding preset slot and make a call to the backend `PUT /api/users/me/presets` endpoint to save the change for the user. Update the clicked preset button's displayed text/name accordingly.

Please implement these backend and frontend changes for the preset system. Focus on the core mechanism of saving, displaying, activating (left-click), and assigning (right-click -> modal -> save) models to presets. Special styling for the "Search" preset can be handled later.