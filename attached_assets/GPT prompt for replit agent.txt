Replit Coding Agent Prompt:

Hello Coding Agent,

Our openrouter-based chatbot currently uses a standard fetch workflow that calls await res.json() to process API responses. This prevents true streaming because it waits for the entire response to complete before updating the UI.

Please update the streaming response logic (for example, in the file “useStreamingChat.ts” or our API request handler) as follows:

Replace Full JSON Parsing:
Instead of awaiting res.json(), modify the code to use the response’s ReadableStream. For example:

csharp
Copy
const reader = res.body.getReader();
const decoder = new TextDecoder();
let result = '';
let done = false;
while (!done) {
  const { value, done: doneReading } = await reader.read();
  done = doneReading;
  result += decoder.decode(value, { stream: !done });
  // Update the chat UI incrementally with the new chunk (result could be appended to the message so far)
}
Incremental UI Updates:
Ensure that each chunk of data is appended to the message already in the UI (or processed accordingly) so that the user sees the response build in real time.

Error Handling:
Keep or improve existing error handling so that if a streaming error occurs, the user receives a clear notification without crashing the UI.

Minimal Changes:
Make only the necessary changes to replace the await res.json() block with the streaming reader logic, ensuring that other parts of the chatbot remain unaffected.

Thank you!